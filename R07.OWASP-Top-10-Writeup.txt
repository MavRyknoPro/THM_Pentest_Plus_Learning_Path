Task 1: Introduction 

	[+] This room breaks each OWASP topic down and includes details on what the vulnerability is, how it occurs and how you can exploit it.

		[1] Injection 
		[2] Broken Authentication 
		[3] Sensitive Data Exposure 
		[4] XML External Entity
		[5] Broken Access Control 
		[6] Security Misconfiguration 
		[7] Cross-site Scripting 
		[8] Insecure Deserialization 
		[9] Components with Known Vulnerabilities 
		[10] Insufficent Logging & Monitoring 

	[+] The room has been designed for beginners and assume no previous knowledge of security 

	[!] Answer: No answer needed 

******************************************************************************************************************************************************************************************************************************************

Task 2: Accessing Machines

	[+] This task you’re learning Connect Using Open VPN because often through hacking a virtual machine. 

	[+] sudo apt-get install openvpn 

	[!] Answer: No answer needed 

******************************************************************************************************************************************************************************************************************************************

Task 3: [Severity 1] - Injection 

	[+] Injection flaws are very common in applications today. 

	[+] These flaws occur because user controlled input is interpreted as actual commands or parameter by the application 

	[+] One of those:
	
	[*] SQL Injection: This occurs when user controlled input is passed to SQL queries. 
	[*] Command Injection: This occurs when user input is passed to system commands. 

	[+] If an attacker can be successfully pass input that is interpreted correctly, they can do:

	[*] Access, Modify, Delete information in a database 
	[*] Execute Arbitrary system commands on a server that would allow an attacker to gain access to users systems.

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 4: [Severity 1] - OS Command Injection

	[+] It is a web vulnerability that allows an attacker to take advantage of that made system call to execute operating system commands on the server. 

	[+] Sometime it not dangerous

	[+] Command Injection can open up many options for attacker 

	[!] Answer: No answer needed 

******************************************************************************************************************************************************************************************************************************************

Task 5: [Severity 1] - Command Injection Practical

[*] What is Active Command Injection? 

	[+] Blind command injection not return the response to the user in the HTML document but Active command injection will do.

	[+] It can be made visible through several HTML elements.

	[+] We know that active command injection occurs when you can see the response from the system call 

[Question 1]: What strange text file is in the website root directory? 

	[+] In this question, we will connect to https://10.10.199.127/evilshell.php 

	[+] The Evil shell code is already in this task, you need read and understand how does it code work

	[+] Before we connect to that link, we type “ls” in the console and submit 

	[+] We will see all files in this 

	[!] Answer: drpepper.txt 

[Question 2]: How many non-root/non-service/non-daemon users are there? 

	[+] Continue connect to https://10.10.199.127/evilshell.php

	[+] Type command “cat etc/passwd” 

	[+] We can see all people have service and $username folder is /home/$username

	[!] Answer: 0

[Question 3]: What user is this app running as? 

	[+] This question you need type command “whoami” 

	[!] Answer: www-data

[Question 4]: What is the user’s shell set as?

[*] Shell is a computer program that exposes services or programs to the user. OS shells come in many varieties, using either a command line interface (CLI) or a GUI

	[+] This question we will type command “cat /etc/passwd” again

	[+] Look for the www-data user to see shell’s user www-data

	[!] Answer: /usr/sbin/nologin 

[Question 5]: What version of Ubuntu is running? 

	[+] This question we have two ways

	[+] We can use Wappalyzer for check Ubuntu version for this web 

[*] Anyway, this task instructs active command injection. Then we will use command for this mission 

	[+] We will type command lsb_release-a and submit 

	[+] We will see Ubuntu’s version is running 

	[!] Answer: 18.04.4

[Question 6]: Print out the MOTD. What favorite beverage is shown? 

[**] We have hint:  00-header 

	[+] I search google and see this 
	[!] The MOTD is displayed after a user successfully logs in to the server using ssh. The MOTD is typically stored in a file called “/etc/motd”, and it can be used to provide users with important information, such as announcements, security advisories, or system status updates. 

	[+] But we type command “ls etc/motd” is not response 

	[+] We can try this command “ls /etc/update-motd.d”, this command will show we all the files that are there for MOTD.

	[+] Look for 00-header and where it is located. 

	[+] Cat this cat /etc/update-motd.d/00-header

	[!] Answer: Dr Pepper

******************************************************************************************************************************************************************************************************************************************

Task 6: [Severity 2] - Broken Authentication 

	[+] Authentication and session management constitute core components of modern web applications. Authentication allows users to gain access to web applications by verifying their identities.

	[+] The most common form of Authentication is using a username and password. 

	[+] If an attacker is able to find flaws in an authentication mechanism, they would then successfully gain access to other users’ accounts.

[*] Some common flaws in authentication mechanisms include:

		[1]: BruteForce Attack
		[2]: Use of weak crendentials 
		[3]: Weak session cookies

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 7: [Severity 2] Broken Authentication Practical

	[+] We will connect to https://10.10.98.33:8888 

	[+] Click and register 

	[+] Server has a username "darren", we will create a username " darren" (notice the space in the starting)

	[+] Before register, we will login with darren's account by a username " darren" and capture the flag

	[!] Answer: fe86079416a21a3c99937fea8874b667

[**] Now we're trying with arthur's account 

	[+] Do the same thing as previous question but then with the username arthur

	[+] After register, login with arthur's account by " arthur" and capture the flag

	[!] Answer: d9ac0f7db4fda460ac3edeb75d75e16e

[*] This vulnerability because that developers forgets to sanitize the input(username & password) given by the user in the code of their application.

******************************************************************************************************************************************************************************************************************************************

Task 8: [Severity 3] Sensitive Data Exposure (Introduction)

	[+] Sensitive Data Exposure when a webapp accidentally divulges Sensitive data. 

	[+] It can be user information such as name, date of birth,... or more seriously, username and password

	[+] This technique is related to MITM attack.

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 9: [Severity 3] - Sensitive Data Exposure (Supporting Material 1)

	[+] You need have knowledge about SQL 

	[+] The most common (and simplest) format of flat-file database is an sqlite database. These can be interacted with in most programming languages, and have a dedicated client for querying them on the command line. This client is called "sqlite3", and is installed by default on Kali.

		[1] You need had file database 
		[2] To access it we use : sqlite3 <database - name>
		[3] Then, use command of SQL to see information and database 

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 10: [Severity 3] Sensitive Data Exposure (Supporting Material 2)

	[+] Kali comes pre-installed with various tools for hash cracking

	[+] Or we can use website to do this (CrackStation)

	[+] Once we have found the hash as per the instructions of the previous post, we will paste the hash into the CrackStation website so we can get the required value.

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 11: [Severity 3] Sensitive Data Exposure (Challenge)

	[+] Connect to this https://10.10.206.56

	[+] OK, we will navigate to the login page and view the source code. 

	[+] In source code, we can see one line comment : 

	"<!-- Must remember to do something better with the database than store it in /assets... [!]" 

[Question 1]: What is the name of the mentioned directory?

	[!] Answer: /assets

[Question 2]: Navigate to the directory you found in question one. What file stands out as being likely to contain sensitive data?

	[+] Navigate to /assets when we find in question 1

	[+] https://10.10.206.56/assets

	[+] In here, we find the database file is "webapp.db"

	[!] Answer: webapp.db

[Question 3]: Use the supporting material to access the sensitive data. What is the password hash of the admin user?

	[+] First, we download file webapp.db 

	[+] Cd to folder the webapp.db located 

		[+] Type commands
		[1] sqlite3 webapp.db: This command allows us to access the database
		[2] .tables: This command allows us to see all tables of database
		[3] PRAGMA table_info(users); : This command allows us to see all information of users 
		[4] SELECT * FROM users; : This command allows us to dump the information from the table

	[+] We can see the hash password of admin is : admin|6eea9b7ef19179a06954edd0f6c05ceb|

	[!] Answer: 6eea9b7ef19179a06954edd0f6c05ceb

[Question 4]: Crack the hash.What is the admin's plaintext password?

	[+] Like the before task, we cought use the website to dump hash password 

	[+] Connect to CrackStation web and paste the hash password

	[+] Type is md5 and result is qwertyuiop

	[!] Answer: qwertyuiop

[Question 5]: Login as the admin. What is the flag? 

	[+] After we have password for admin. We're logining as the admin now 

	[!] Answer: THM{Yzc2YjdkMjE5N2VjMzNhOTE3NjdiMjdl}

******************************************************************************************************************************************************************************************************************************************

Task 12: [Severity 4] XML External Entity

	[+] Read the task and ready for next task.

	[+] You need have knowledge about XML 

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 13: [Severity 4] XML External Entity - eXtensible Markup Language

	[+] XML (eXtensible Markup Language) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. It is a markup language used for storing and transporting data. 	

	[+] Syntax : Read and understand the task 

[Question 1]: Full form of XML 

	[!] Answer: eXtensible Markup Language

[Question 2]: Is it compulsory to have XML prolog in XML documents?

	[!] Answer: No

[Question 3]: Can we validate XML documents against a schema?

	[!] Answer: Yes 

[Question 4]: How can we specify XML version and encoding in XML document?

	[!] Answer: XML prolog

******************************************************************************************************************************************************************************************************************************************

Task 14: [Severity 4] XML External Entity - DTD

	[+] Before we move on to start learning about XXE we'll have to understand what is DTD in XML.

	[+] Read this task and understand about DTD 

		[+] Types DTD
		[1] !DOCTYPE note 
		[2] !ELEMENT note 
		[3] !ELEMENT to 
		[4] !ELEMENT from 
		[5] !ELEMENT heading 
		[6] !ELEMENT body

[Question 1]: How do you define a new ELEMENT?

	[!] Answer: !ELEMENT 

[Question 2]: How do you define a ROOT element?

	[!] Answer: !DOCTYPE

	[+] !DOCTYPE : Defines a root element of the document named note

[Question 3]: How do you define a new ENTITY?

	[!] Answer: !ENTITY

******************************************************************************************************************************************************************************************************************************************

Task 15: [Severity 4] XML External Entity - XXE Payload

	[+] Read this task and press complete to understand XXE-Payload.

******************************************************************************************************************************************************************************************************************************************

Task 16: [Severity 4] XML External Entity - Exploiting

	[+] Read this task and complete the question 

[Question 1]: Try to display your own name using any payload.

	[!] Answer: No answer needed

	<!DOCTYPE replace [<!ENTITY name "VanHieu"> ]>
	<userinfo>	
		<firstname>&name;</firstname>
	</userinfo>

	[+] This payload will return my name is VanHieu

[Question 2]: See if you can read the /etc/passwd

	[!] Answer: No answer needed

[Question 3]: What is the name of the user in /etc/passwd

	[+] Connect to https://10.10.67.102 

	[+] Type the payload with ENTITY SYSTEM file:///etc/passwd''

	[+] Use start at 1000. If we look at the output of the previous question we see one user is falcon

	[!] Answer: falcon

[Question 4]: Where is falcon's SSH key located?

	[+] We know, ssh keys are locate in the users home directory 

	[!] Answer: /home/falcon/.ssh/id_rsa

[Question 5]: What are the first 18 characters for falcon's private key

	[+] Continue type the payload but this time, we will change file system to /home/falcon/.ssh/id_rsa to read this file

	[!] Answer: MIIEogIBAAKCAQEA7

******************************************************************************************************************************************************************************************************************************************

Task 17: [Severity 5] Broken Access Control

	[+] Websites have pages that are protected from regular visitors, for example only the site's admin user should be able to access a page to manage other users. If a website visitor is able to access the protected page/pages that they are not authorised to view, the access controls are broken.

	[+] A regular visitor being able to access protected pages, can lead to the following:

		[1] Being able to view sensitive information
		[2] Accessing unauthorized functionality 

	[+] Read two attack scenarios demonstrating access control weaknesses.

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 18: [Severity 5] Broken Access Control (IDOR Challenge)

	[+] Read and understand how IDOR work 

	[+] There is however a potentially huge problem here, a hacker may be able to change the account_number parameter to something else like 1235, and if the site is incorrectly configured, then he would have access to someone else's bank information. 

[Question task]: Look at other users notes. What is the flag?

	[+] First, login with account 

	[+] In the URL, we look at the parameter note.php?note=1, we will change the value 1 to 0 and see the flag

	[!] Answer: flag{fivefourthree} 

******************************************************************************************************************************************************************************************************************************************

Task 19: [Severity 6] Security Misconfiguration

	[+] Security Misconfigurations are distinct from the other Top 10 vulnerabilities, because they occur when security could have been configured properly but was not.

	[+] Security Misconfiguration include:

		[1] Poorly configured permissions on cloud services, like S3 buckets
		[2] Having unnecessary features enabled, like services, pages, accounts or privileges
		[3] Default accounts with unchanged passwords
		[4] Error messages that are overly detailed and allow an attacker to find out more about the system
		[5] Not using HTTP security headers, or revealing too much detail in the Server: HTTP header

	[+] This vulnerability can open more vulnerabilities (login information,XXE, command injection,...)

	[+] In this task, we focus to default password 

	[+] Read and understand about Default Password 

[Question 1]: Deploy the VM 

	[!] Answer: No answer needed 

[Question 2]: Hack into the webapp, and find the flag

	[+] We have hint: Can you find the app's source code? Maybe the documentation gives you default credentials that you can try.

	[+] We search google "pensive github" and see the pensivenotes account in one post. 

	[*] NinjaJc01/pensivenotes

	[*] Account : pensive:PensiveNotes 

	[+] Login with this account and capture the flag

	[!] Answer: thm{4b9513968fd564a87b28aa1f9d672e17}

******************************************************************************************************************************************************************************************************************************************

Task 20: [Severity 7] Cross-site Scripting

	[+] Cross-site scripting, also known as XSS is a security vulnerability typically found in web applications. It’s a type of injection which can allow an attacker to execute malicious scripts and have it execute on a victim’s machine.

	[+] There are three main types of XSS 

		[1] Stored XSS
		[2] Reflected XSS
		[3] DOM-Based XSS

	[+] XSS Payload: cross-site scripting is a vulnerability that can be exploited to execute malicious Javascript on a victim’s machine

	[+] Deploy the VM 

[Question 1]: Navigate to http://MACHINE_IP/ in your browser and click on the "Reflected XSS" tab on the navbar; craft a reflected XSS payload that will cause a popup saying "Hello".

	[+] Connect to https://10.10.28.53/ 

	[+] Click to the reflected XSS 

	[+] Type this: <script>alert("Hello World")</script>

	[!] Answer: ThereIsMoreToXSSThanYouThink

[Question 2]: On the same reflective page, craft a reflected XSS payload that will cause a popup with your machines IP address.

	[+] Do same question 1

	[+] But the script we type is <script>alert(window.location.hostname)</script>

	[!] Answer: ReflectiveXss4TheWin

[Question 3]: Now navigate to http://10.10.28.53/ in your browser and click on the "Stored XSS" tab on the navbar; make an account.
Then add a comment and see if you can insert some of your own HTML.

	[+] First, we click to XSS stored

	[+] Register a new account

	[+] After register, we can see the comment box, we type in there "<h1>Do somthing</h1>" 

	[+] We can find the answer for question 

	[!] Answer: HTML_T4gs

[Question 4]: On the same page, create an alert popup box appear on the page with your document cookies.

	[+] This task, we comeback to XSS stored to add script 

	[+] Type script: <script>alert(document.cookie)</script>

	[!] Answer: W3LL_D0N3_LVL2

[Question 5]: Change "XSS Playground" to "I am a hacker" by adding a comment and using Javascript.

	[+] We use Javascript to change XSS Playground

	[+] Following this script: <script>document.querySelector('#thm-title').textContent = I am a hacker'</script>

	[!] Answer: websites_can_be_easily_defaced_with_xss

******************************************************************************************************************************************************************************************************************************************

Task 21: [Severity 8] Insecure Deserialization

	[+] Read and understand this task 

	[+] Complete the answer

[Question 1]: Who developed the Tomcat application?

	[+] This question we can search google and find the answer

	[!] Answer: The Apache Software Foundation

[Question 2]: What type of attack that crashes services can be performed with insecure deserialization?

	[!] Answer: Denial of Service 

******************************************************************************************************************************************************************************************************************************************

Task 22: [Severity 8] Insecure Deserialization - Objects

	[+] The OOP Objects are made up of two things

		[1] State 
		[2] Behaviour 

	[+] objects allow you to create similar lines of code without having to do the leg-work of writing the same lines of code again.

[Question]: If a dog was sleeping, would this be: 

	[!] Answer: Behaviour

******************************************************************************************************************************************************************************************************************************************

Task 23: [Severity 8] Insecure Deserialization - Deserialization

	[+] Read this task and complete the Answer

[Question 1]: What is the name of the base-2 formatting that data is sent across a network as? 

	[!] Answer: Binary 

******************************************************************************************************************************************************************************************************************************************

Task 24: [Severity 8] Insecure Deserialization - Cookies

	[+] Cookies are an essential tool for modern websites to function. Tiny pieces of data, these are created by a website and stored on the user's computer. 

	[+] Websites use these cookies to store user-specific behaviours like items in their shopping cart or session IDs.

	[+] Read this task and complete question 

[Question 1]: If a cookie had the path of webapp.com/login , what would the URL that the user has to visit be?

	[!] Answer: webapp.com/login

[Question 2]: What is the acronym for the web technology that Secure cookies work over?

	[!] Answer: HTTPS 

******************************************************************************************************************************************************************************************************************************************

Task 25: [Severity 8] Insecure Deserialization - Cookies Practical

	[+] First, we need to sign up a new account 

	[+] We use right mouse and click to inspect

	[+] Move to storage, in cookie we see sessionld. 

	[+] Copy that and use web base64 to decryption 

	[!] Answer: THM{good_old_base64_huh}

[Admin Dashboard]

	[+] We will change value in cookie, userType "user" to "admin" 

	[+] Now we navigate to http://10.10.221.157/admin to see the flag

	[!] Answer: THM{heres_the_admin_flag} 

******************************************************************************************************************************************************************************************************************************************

Task 26: [Severity 8] Insecure Deserialization - Code Execution

	[+] A much more nefarious attack than simply decoding cookies, we get into the nitty-gritty.

	[+] After change user to admin in the cookie, we comeback to http://10.10.211.157/myprofile

	[+] Then, left-click on the URL in "Exhange your vim" found in the screenshot below.

	[+] Once you have done this, left-click on the URL in "Provide your feedback!".

	[+] Following the task to the exploit and answer the question

	[!] Answer: 4a69a7ff9fd68

******************************************************************************************************************************************************************************************************************************************

Task 27: [Severity 9] Components With Known Vulnerabilities - Intro

	[+] Read this task and complete the question 

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 28: [Severity 9] Components With Known Vulnerabilities - Exploit

	[+] Read this task and complete the question 

	[+] We can following to exploit in this task for training 

	[!] Answer: No answer needed

******************************************************************************************************************************************************************************************************************************************

Task 29: [Severity 9] Components With Known Vulnerabilities - Lab

	[+] Deploy the VM

	[+] We will find an exploit (exploit-db.com)

	[+] Download 47887.py 

	[+] Type this command: python3 47887.py http://10.10.185.155

	[+] Use wc -c /etc/passwd to get the answer

	[!] Answer: 1611

******************************************************************************************************************************************************************************************************************************************

Task 30: [Severity 10] Insufficient Logging and Monitoring

	[+] Read this task and complete the answer

	[+] Download Task Files 

[Question 1]: What IP address is the attacker using?

	[+] We can see multiple times from the same IP. 

	[+] We can see IP address is: 49.99.13.16

	[!] Answer: 49.99.13.16

[Question 2]: What kind of attack is being carried out?

	[!] Answer: BruteForce

******************************************************************************************************************************************************************************************************************************************

Task 31: What Next?

	[+] Read task and complete this room

	[!] Answer: No answer needed

